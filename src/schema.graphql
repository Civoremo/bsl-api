type Query {
	info: String!
	me: User
	allUsers: [User!]!
	allLeagues: [League!]!
	allTeams: [Team!]!
	allGames: [Game!]!
	allPlayers: [Player!]!
	league(id: ID!): League
	team(id: ID!): Team
	player(id: ID!): Player
	game(id: ID!): Game
	win(id: ID!): Win!
	loss(id: ID!): Loss!
	tie(id: ID!): [Tie]
	allTournaments: [Tournament!]!
	allTeamsTournament: [TournamentTeam!]!
	allPlayerTournament: [TournamentPlayer!]!
	tournament(id: ID!): Tournament
	teamTournament(id: ID!): TournamentTeam!
	gameTournament(id: ID!): TournamentGame!
	playerTournament(id: ID!): TournamentPlayer!
	winTournament(id: ID!): TournamentWin!
	lossTournament(id: ID!): TournamentLoss!
	tieTournament(id: ID!): [TournamentTie!]!
}

type Mutation {
	post: String!
	signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload!
	login(email: String!, password: String!): AuthPayload!
	updateProfile(name: String, email: String): User!
	updateUserPassword(newPass1: String!, newPass2: String!, oldPass: String!): Message
	requestPasswordReset(email: String!): Message
	resetPassword(resetToken: String!, password: String!): User!
	postLeague(name: String!, location: String!): League
	postTeam(name: String!, leagueId: String!): Team
	postPlayer(name: String!, teamId: String!): Player
	postGame(
		homeTeam: String!
		awayTeam: String!
		leagueId: String!
		day: String!
		time: String
		score: String
		videoURL: String
	): Game
	postWin(gameId: String!, teamId: String!): Win
	postLoss(gameId: String!, teamId: String!): Loss
	postTie(gameId: String!, homeTeamId: String!, awayTeamId: String!): [Tie]
}

type AuthPayload {
	token: String!
	user: User!
}

type Team {
	id: ID!
	name: String!
	wins: [Win!]!
	losses: [Loss!]!
	ties: [Tie!]!
	players: [Player!]!
	league: League!
	postedBy: User!
	games: [Game!]!
}

type Player {
	id: ID!
	name: String!
	played: Int!
	goals: Int!
	assists: Int!
	saves: Int!
	postedBy: User!
	team: Team!
}

type Win {
	id: ID!
	team: Team!
	game: Game!
	postedBy: User!
}

type Loss {
	id: ID!
	team: Team!
	game: Game!
	postedBy: User!
}

type Tie {
	id: ID!
	team: Team!
	game: Game!
	postedBy: User!
}

type Game {
	id: ID!
	day: String!
	homeTeam: Team!
	awayTeam: Team!
	score: String!
	time: String!
	videoURL: String!
	postedBy: User!
	league: League!
	wins: [Win!]!
	losses: [Loss!]!
	ties: [Tie!]!
}

type League {
	id: ID!
	teams: [Team!]!
	location: String!
	name: String!
	postedBy: User!
	games: [Game!]!
}

type User {
	id: ID!
	firstName: String!
	lastName: String!
	email: String!
	leagues: [League!]!
	teams: [Team!]!
	games: [Game!]!
	players: [Player!]!
}

type Tournament {
	id: ID!
	postedBy: User!
	teams: [TournamentTeam!]!
	location: String!
	name: String!
	day: String!
	games: [TournamentGame!]!
}

type TournamentTeam {
	id: ID!
	postedBy: User!
	name: String!
	tournament: Tournament!
	players: [TournamentPlayer!]!
	games: [TournamentGame!]!
	wins: [TournamentWin!]!
	losses: [TournamentLoss!]!
	ties: [TournamentTie!]!
}

type TournamentGame {
	id: ID!
	postedBy: User!
	day: String!
	homeTeam: TournamentTeam!
	awayTeam: TournamentTeam!
	tournament: Tournament!
	score: String!
	time: String!
	videoURL: String!
	wins: [TournamentWin!]!
	losses: [TournamentLoss!]!
	ties: [TournamentTie!]!
}

type TournamentPlayer {
	id: ID!
	postedBy: User!
	name: String!
	played: Int!
	goals: Int!
	assists: Int!
	saves: Int!
	team: TournamentTeam!
}

type TournamentWin {
	id: ID!
	postedBy: User!
	game: TournamentGame!
	team: TournamentTeam!
}

type TournamentLoss {
	id: ID!
	postedBy: User!
	game: TournamentGame!
	team: TournamentTeam!
}

type TournamentTie {
	id: ID!
	postedBy: User!
	game: TournamentGame!
	team: TournamentTeam!
}

type Message {
	message: String
}
