module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGame {
  count: Int!
}

type AggregateLeague {
  count: Int!
}

type AggregateLoss {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTie {
  count: Int!
}

type AggregateTournament {
  count: Int!
}

type AggregateTournamentGame {
  count: Int!
}

type AggregateTournamentLoss {
  count: Int!
}

type AggregateTournamentPlayer {
  count: Int!
}

type AggregateTournamentTeam {
  count: Int!
}

type AggregateTournamentTie {
  count: Int!
}

type AggregateTournamentWin {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWin {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Game {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  homeTeam: Team!
  awayTeam: Team!
  score: String!
  day: String!
  time: String!
  videoURL: String!
  league: League!
  wins(where: WinWhereInput, orderBy: WinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Win!]
  losses(where: LossWhereInput, orderBy: LossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loss!]
  ties(where: TieWhereInput, orderBy: TieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tie!]
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutGamesInput!
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  league: LeagueCreateOneWithoutGamesInput!
  wins: WinCreateManyWithoutGameInput
  losses: LossCreateManyWithoutGameInput
  ties: TieCreateManyWithoutGameInput
}

input GameCreateManyWithoutLeagueInput {
  create: [GameCreateWithoutLeagueInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutPostedByInput {
  create: [GameCreateWithoutPostedByInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutLossesInput {
  create: GameCreateWithoutLossesInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutTiesInput {
  create: GameCreateWithoutTiesInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutWinsInput {
  create: GameCreateWithoutWinsInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutLeagueInput {
  id: ID
  postedBy: UserCreateOneWithoutGamesInput!
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  wins: WinCreateManyWithoutGameInput
  losses: LossCreateManyWithoutGameInput
  ties: TieCreateManyWithoutGameInput
}

input GameCreateWithoutLossesInput {
  id: ID
  postedBy: UserCreateOneWithoutGamesInput!
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  league: LeagueCreateOneWithoutGamesInput!
  wins: WinCreateManyWithoutGameInput
  ties: TieCreateManyWithoutGameInput
}

input GameCreateWithoutPostedByInput {
  id: ID
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  league: LeagueCreateOneWithoutGamesInput!
  wins: WinCreateManyWithoutGameInput
  losses: LossCreateManyWithoutGameInput
  ties: TieCreateManyWithoutGameInput
}

input GameCreateWithoutTiesInput {
  id: ID
  postedBy: UserCreateOneWithoutGamesInput!
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  league: LeagueCreateOneWithoutGamesInput!
  wins: WinCreateManyWithoutGameInput
  losses: LossCreateManyWithoutGameInput
}

input GameCreateWithoutWinsInput {
  id: ID
  postedBy: UserCreateOneWithoutGamesInput!
  homeTeam: TeamCreateOneInput!
  awayTeam: TeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  league: LeagueCreateOneWithoutGamesInput!
  losses: LossCreateManyWithoutGameInput
  ties: TieCreateManyWithoutGameInput
}

type GameEdge {
  node: Game!
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  day_ASC
  day_DESC
  time_ASC
  time_DESC
  videoURL_ASC
  videoURL_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  score: String!
  day: String!
  time: String!
  videoURL: String!
}

input GameScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  score: String
  score_not: String
  score_in: [String!]
  score_not_in: [String!]
  score_lt: String
  score_lte: String
  score_gt: String
  score_gte: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  videoURL: String
  videoURL_not: String
  videoURL_in: [String!]
  videoURL_not_in: [String!]
  videoURL_lt: String
  videoURL_lte: String
  videoURL_gt: String
  videoURL_gte: String
  videoURL_contains: String
  videoURL_not_contains: String
  videoURL_starts_with: String
  videoURL_not_starts_with: String
  videoURL_ends_with: String
  videoURL_not_ends_with: String
  AND: [GameScalarWhereInput!]
  OR: [GameScalarWhereInput!]
  NOT: [GameScalarWhereInput!]
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateInput {
  postedBy: UserUpdateOneRequiredWithoutGamesInput
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  league: LeagueUpdateOneRequiredWithoutGamesInput
  wins: WinUpdateManyWithoutGameInput
  losses: LossUpdateManyWithoutGameInput
  ties: TieUpdateManyWithoutGameInput
}

input GameUpdateManyDataInput {
  score: String
  day: String
  time: String
  videoURL: String
}

input GameUpdateManyMutationInput {
  score: String
  day: String
  time: String
  videoURL: String
}

input GameUpdateManyWithoutLeagueInput {
  create: [GameCreateWithoutLeagueInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutLeagueInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutLeagueInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithoutPostedByInput {
  create: [GameCreateWithoutPostedByInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateOneRequiredWithoutLossesInput {
  create: GameCreateWithoutLossesInput
  update: GameUpdateWithoutLossesDataInput
  upsert: GameUpsertWithoutLossesInput
  connect: GameWhereUniqueInput
}

input GameUpdateOneRequiredWithoutTiesInput {
  create: GameCreateWithoutTiesInput
  update: GameUpdateWithoutTiesDataInput
  upsert: GameUpsertWithoutTiesInput
  connect: GameWhereUniqueInput
}

input GameUpdateOneRequiredWithoutWinsInput {
  create: GameCreateWithoutWinsInput
  update: GameUpdateWithoutWinsDataInput
  upsert: GameUpsertWithoutWinsInput
  connect: GameWhereUniqueInput
}

input GameUpdateWithoutLeagueDataInput {
  postedBy: UserUpdateOneRequiredWithoutGamesInput
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  wins: WinUpdateManyWithoutGameInput
  losses: LossUpdateManyWithoutGameInput
  ties: TieUpdateManyWithoutGameInput
}

input GameUpdateWithoutLossesDataInput {
  postedBy: UserUpdateOneRequiredWithoutGamesInput
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  league: LeagueUpdateOneRequiredWithoutGamesInput
  wins: WinUpdateManyWithoutGameInput
  ties: TieUpdateManyWithoutGameInput
}

input GameUpdateWithoutPostedByDataInput {
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  league: LeagueUpdateOneRequiredWithoutGamesInput
  wins: WinUpdateManyWithoutGameInput
  losses: LossUpdateManyWithoutGameInput
  ties: TieUpdateManyWithoutGameInput
}

input GameUpdateWithoutTiesDataInput {
  postedBy: UserUpdateOneRequiredWithoutGamesInput
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  league: LeagueUpdateOneRequiredWithoutGamesInput
  wins: WinUpdateManyWithoutGameInput
  losses: LossUpdateManyWithoutGameInput
}

input GameUpdateWithoutWinsDataInput {
  postedBy: UserUpdateOneRequiredWithoutGamesInput
  homeTeam: TeamUpdateOneRequiredInput
  awayTeam: TeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  league: LeagueUpdateOneRequiredWithoutGamesInput
  losses: LossUpdateManyWithoutGameInput
  ties: TieUpdateManyWithoutGameInput
}

input GameUpdateWithWhereUniqueWithoutLeagueInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutLeagueDataInput!
}

input GameUpdateWithWhereUniqueWithoutPostedByInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutPostedByDataInput!
}

input GameUpsertWithoutLossesInput {
  update: GameUpdateWithoutLossesDataInput!
  create: GameCreateWithoutLossesInput!
}

input GameUpsertWithoutTiesInput {
  update: GameUpdateWithoutTiesDataInput!
  create: GameCreateWithoutTiesInput!
}

input GameUpsertWithoutWinsInput {
  update: GameUpdateWithoutWinsDataInput!
  create: GameCreateWithoutWinsInput!
}

input GameUpsertWithWhereUniqueWithoutLeagueInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutLeagueDataInput!
  create: GameCreateWithoutLeagueInput!
}

input GameUpsertWithWhereUniqueWithoutPostedByInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutPostedByDataInput!
  create: GameCreateWithoutPostedByInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  homeTeam: TeamWhereInput
  awayTeam: TeamWhereInput
  score: String
  score_not: String
  score_in: [String!]
  score_not_in: [String!]
  score_lt: String
  score_lte: String
  score_gt: String
  score_gte: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  videoURL: String
  videoURL_not: String
  videoURL_in: [String!]
  videoURL_not_in: [String!]
  videoURL_lt: String
  videoURL_lte: String
  videoURL_gt: String
  videoURL_gte: String
  videoURL_contains: String
  videoURL_not_contains: String
  videoURL_starts_with: String
  videoURL_not_starts_with: String
  videoURL_ends_with: String
  videoURL_not_ends_with: String
  league: LeagueWhereInput
  wins_every: WinWhereInput
  wins_some: WinWhereInput
  wins_none: WinWhereInput
  losses_every: LossWhereInput
  losses_some: LossWhereInput
  losses_none: LossWhereInput
  ties_every: TieWhereInput
  ties_some: TieWhereInput
  ties_none: TieWhereInput
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
}

type League {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  location: String!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

type LeagueConnection {
  pageInfo: PageInfo!
  edges: [LeagueEdge]!
  aggregate: AggregateLeague!
}

input LeagueCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutLeaguesInput!
  name: String!
  teams: TeamCreateManyWithoutLeagueInput
  location: String!
  games: GameCreateManyWithoutLeagueInput
}

input LeagueCreateManyWithoutPostedByInput {
  create: [LeagueCreateWithoutPostedByInput!]
  connect: [LeagueWhereUniqueInput!]
}

input LeagueCreateOneWithoutGamesInput {
  create: LeagueCreateWithoutGamesInput
  connect: LeagueWhereUniqueInput
}

input LeagueCreateOneWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  connect: LeagueWhereUniqueInput
}

input LeagueCreateWithoutGamesInput {
  id: ID
  postedBy: UserCreateOneWithoutLeaguesInput!
  name: String!
  teams: TeamCreateManyWithoutLeagueInput
  location: String!
}

input LeagueCreateWithoutPostedByInput {
  id: ID
  name: String!
  teams: TeamCreateManyWithoutLeagueInput
  location: String!
  games: GameCreateManyWithoutLeagueInput
}

input LeagueCreateWithoutTeamsInput {
  id: ID
  postedBy: UserCreateOneWithoutLeaguesInput!
  name: String!
  location: String!
  games: GameCreateManyWithoutLeagueInput
}

type LeagueEdge {
  node: League!
  cursor: String!
}

enum LeagueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
}

type LeaguePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  location: String!
}

input LeagueScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [LeagueScalarWhereInput!]
  OR: [LeagueScalarWhereInput!]
  NOT: [LeagueScalarWhereInput!]
}

type LeagueSubscriptionPayload {
  mutation: MutationType!
  node: League
  updatedFields: [String!]
  previousValues: LeaguePreviousValues
}

input LeagueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LeagueWhereInput
  AND: [LeagueSubscriptionWhereInput!]
  OR: [LeagueSubscriptionWhereInput!]
  NOT: [LeagueSubscriptionWhereInput!]
}

input LeagueUpdateInput {
  postedBy: UserUpdateOneRequiredWithoutLeaguesInput
  name: String
  teams: TeamUpdateManyWithoutLeagueInput
  location: String
  games: GameUpdateManyWithoutLeagueInput
}

input LeagueUpdateManyDataInput {
  name: String
  location: String
}

input LeagueUpdateManyMutationInput {
  name: String
  location: String
}

input LeagueUpdateManyWithoutPostedByInput {
  create: [LeagueCreateWithoutPostedByInput!]
  delete: [LeagueWhereUniqueInput!]
  connect: [LeagueWhereUniqueInput!]
  set: [LeagueWhereUniqueInput!]
  disconnect: [LeagueWhereUniqueInput!]
  update: [LeagueUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LeagueUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [LeagueScalarWhereInput!]
  updateMany: [LeagueUpdateManyWithWhereNestedInput!]
}

input LeagueUpdateManyWithWhereNestedInput {
  where: LeagueScalarWhereInput!
  data: LeagueUpdateManyDataInput!
}

input LeagueUpdateOneRequiredWithoutGamesInput {
  create: LeagueCreateWithoutGamesInput
  update: LeagueUpdateWithoutGamesDataInput
  upsert: LeagueUpsertWithoutGamesInput
  connect: LeagueWhereUniqueInput
}

input LeagueUpdateOneRequiredWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  update: LeagueUpdateWithoutTeamsDataInput
  upsert: LeagueUpsertWithoutTeamsInput
  connect: LeagueWhereUniqueInput
}

input LeagueUpdateWithoutGamesDataInput {
  postedBy: UserUpdateOneRequiredWithoutLeaguesInput
  name: String
  teams: TeamUpdateManyWithoutLeagueInput
  location: String
}

input LeagueUpdateWithoutPostedByDataInput {
  name: String
  teams: TeamUpdateManyWithoutLeagueInput
  location: String
  games: GameUpdateManyWithoutLeagueInput
}

input LeagueUpdateWithoutTeamsDataInput {
  postedBy: UserUpdateOneRequiredWithoutLeaguesInput
  name: String
  location: String
  games: GameUpdateManyWithoutLeagueInput
}

input LeagueUpdateWithWhereUniqueWithoutPostedByInput {
  where: LeagueWhereUniqueInput!
  data: LeagueUpdateWithoutPostedByDataInput!
}

input LeagueUpsertWithoutGamesInput {
  update: LeagueUpdateWithoutGamesDataInput!
  create: LeagueCreateWithoutGamesInput!
}

input LeagueUpsertWithoutTeamsInput {
  update: LeagueUpdateWithoutTeamsDataInput!
  create: LeagueCreateWithoutTeamsInput!
}

input LeagueUpsertWithWhereUniqueWithoutPostedByInput {
  where: LeagueWhereUniqueInput!
  update: LeagueUpdateWithoutPostedByDataInput!
  create: LeagueCreateWithoutPostedByInput!
}

input LeagueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  AND: [LeagueWhereInput!]
  OR: [LeagueWhereInput!]
  NOT: [LeagueWhereInput!]
}

input LeagueWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Loss {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: Team!
  game: Game!
}

type LossConnection {
  pageInfo: PageInfo!
  edges: [LossEdge]!
  aggregate: AggregateLoss!
}

input LossCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutLossesInput!
  game: GameCreateOneWithoutLossesInput!
}

input LossCreateManyWithoutGameInput {
  create: [LossCreateWithoutGameInput!]
  connect: [LossWhereUniqueInput!]
}

input LossCreateManyWithoutTeamInput {
  create: [LossCreateWithoutTeamInput!]
  connect: [LossWhereUniqueInput!]
}

input LossCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutLossesInput!
}

input LossCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: GameCreateOneWithoutLossesInput!
}

type LossEdge {
  node: Loss!
  cursor: String!
}

enum LossOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LossPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input LossScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LossScalarWhereInput!]
  OR: [LossScalarWhereInput!]
  NOT: [LossScalarWhereInput!]
}

type LossSubscriptionPayload {
  mutation: MutationType!
  node: Loss
  updatedFields: [String!]
  previousValues: LossPreviousValues
}

input LossSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LossWhereInput
  AND: [LossSubscriptionWhereInput!]
  OR: [LossSubscriptionWhereInput!]
  NOT: [LossSubscriptionWhereInput!]
}

input LossUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutLossesInput
  game: GameUpdateOneRequiredWithoutLossesInput
}

input LossUpdateManyWithoutGameInput {
  create: [LossCreateWithoutGameInput!]
  delete: [LossWhereUniqueInput!]
  connect: [LossWhereUniqueInput!]
  set: [LossWhereUniqueInput!]
  disconnect: [LossWhereUniqueInput!]
  update: [LossUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [LossUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [LossScalarWhereInput!]
}

input LossUpdateManyWithoutTeamInput {
  create: [LossCreateWithoutTeamInput!]
  delete: [LossWhereUniqueInput!]
  connect: [LossWhereUniqueInput!]
  set: [LossWhereUniqueInput!]
  disconnect: [LossWhereUniqueInput!]
  update: [LossUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [LossUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [LossScalarWhereInput!]
}

input LossUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutLossesInput
}

input LossUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutLossesInput
}

input LossUpdateWithWhereUniqueWithoutGameInput {
  where: LossWhereUniqueInput!
  data: LossUpdateWithoutGameDataInput!
}

input LossUpdateWithWhereUniqueWithoutTeamInput {
  where: LossWhereUniqueInput!
  data: LossUpdateWithoutTeamDataInput!
}

input LossUpsertWithWhereUniqueWithoutGameInput {
  where: LossWhereUniqueInput!
  update: LossUpdateWithoutGameDataInput!
  create: LossCreateWithoutGameInput!
}

input LossUpsertWithWhereUniqueWithoutTeamInput {
  where: LossWhereUniqueInput!
  update: LossUpdateWithoutTeamDataInput!
  create: LossCreateWithoutTeamInput!
}

input LossWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TeamWhereInput
  game: GameWhereInput
  AND: [LossWhereInput!]
  OR: [LossWhereInput!]
  NOT: [LossWhereInput!]
}

input LossWhereUniqueInput {
  id: ID
}

type Mutation {
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createLeague(data: LeagueCreateInput!): League!
  updateLeague(data: LeagueUpdateInput!, where: LeagueWhereUniqueInput!): League
  updateManyLeagues(data: LeagueUpdateManyMutationInput!, where: LeagueWhereInput): BatchPayload!
  upsertLeague(where: LeagueWhereUniqueInput!, create: LeagueCreateInput!, update: LeagueUpdateInput!): League!
  deleteLeague(where: LeagueWhereUniqueInput!): League
  deleteManyLeagues(where: LeagueWhereInput): BatchPayload!
  createLoss(data: LossCreateInput!): Loss!
  updateLoss(data: LossUpdateInput!, where: LossWhereUniqueInput!): Loss
  upsertLoss(where: LossWhereUniqueInput!, create: LossCreateInput!, update: LossUpdateInput!): Loss!
  deleteLoss(where: LossWhereUniqueInput!): Loss
  deleteManyLosses(where: LossWhereInput): BatchPayload!
  createPlayer(data: PlayerCreateInput!): Player!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createTie(data: TieCreateInput!): Tie!
  updateTie(data: TieUpdateInput!, where: TieWhereUniqueInput!): Tie
  upsertTie(where: TieWhereUniqueInput!, create: TieCreateInput!, update: TieUpdateInput!): Tie!
  deleteTie(where: TieWhereUniqueInput!): Tie
  deleteManyTies(where: TieWhereInput): BatchPayload!
  createTournament(data: TournamentCreateInput!): Tournament!
  updateTournament(data: TournamentUpdateInput!, where: TournamentWhereUniqueInput!): Tournament
  updateManyTournaments(data: TournamentUpdateManyMutationInput!, where: TournamentWhereInput): BatchPayload!
  upsertTournament(where: TournamentWhereUniqueInput!, create: TournamentCreateInput!, update: TournamentUpdateInput!): Tournament!
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteManyTournaments(where: TournamentWhereInput): BatchPayload!
  createTournamentGame(data: TournamentGameCreateInput!): TournamentGame!
  updateTournamentGame(data: TournamentGameUpdateInput!, where: TournamentGameWhereUniqueInput!): TournamentGame
  updateManyTournamentGames(data: TournamentGameUpdateManyMutationInput!, where: TournamentGameWhereInput): BatchPayload!
  upsertTournamentGame(where: TournamentGameWhereUniqueInput!, create: TournamentGameCreateInput!, update: TournamentGameUpdateInput!): TournamentGame!
  deleteTournamentGame(where: TournamentGameWhereUniqueInput!): TournamentGame
  deleteManyTournamentGames(where: TournamentGameWhereInput): BatchPayload!
  createTournamentLoss(data: TournamentLossCreateInput!): TournamentLoss!
  updateTournamentLoss(data: TournamentLossUpdateInput!, where: TournamentLossWhereUniqueInput!): TournamentLoss
  upsertTournamentLoss(where: TournamentLossWhereUniqueInput!, create: TournamentLossCreateInput!, update: TournamentLossUpdateInput!): TournamentLoss!
  deleteTournamentLoss(where: TournamentLossWhereUniqueInput!): TournamentLoss
  deleteManyTournamentLosses(where: TournamentLossWhereInput): BatchPayload!
  createTournamentPlayer(data: TournamentPlayerCreateInput!): TournamentPlayer!
  updateTournamentPlayer(data: TournamentPlayerUpdateInput!, where: TournamentPlayerWhereUniqueInput!): TournamentPlayer
  updateManyTournamentPlayers(data: TournamentPlayerUpdateManyMutationInput!, where: TournamentPlayerWhereInput): BatchPayload!
  upsertTournamentPlayer(where: TournamentPlayerWhereUniqueInput!, create: TournamentPlayerCreateInput!, update: TournamentPlayerUpdateInput!): TournamentPlayer!
  deleteTournamentPlayer(where: TournamentPlayerWhereUniqueInput!): TournamentPlayer
  deleteManyTournamentPlayers(where: TournamentPlayerWhereInput): BatchPayload!
  createTournamentTeam(data: TournamentTeamCreateInput!): TournamentTeam!
  updateTournamentTeam(data: TournamentTeamUpdateInput!, where: TournamentTeamWhereUniqueInput!): TournamentTeam
  updateManyTournamentTeams(data: TournamentTeamUpdateManyMutationInput!, where: TournamentTeamWhereInput): BatchPayload!
  upsertTournamentTeam(where: TournamentTeamWhereUniqueInput!, create: TournamentTeamCreateInput!, update: TournamentTeamUpdateInput!): TournamentTeam!
  deleteTournamentTeam(where: TournamentTeamWhereUniqueInput!): TournamentTeam
  deleteManyTournamentTeams(where: TournamentTeamWhereInput): BatchPayload!
  createTournamentTie(data: TournamentTieCreateInput!): TournamentTie!
  updateTournamentTie(data: TournamentTieUpdateInput!, where: TournamentTieWhereUniqueInput!): TournamentTie
  upsertTournamentTie(where: TournamentTieWhereUniqueInput!, create: TournamentTieCreateInput!, update: TournamentTieUpdateInput!): TournamentTie!
  deleteTournamentTie(where: TournamentTieWhereUniqueInput!): TournamentTie
  deleteManyTournamentTies(where: TournamentTieWhereInput): BatchPayload!
  createTournamentWin(data: TournamentWinCreateInput!): TournamentWin!
  updateTournamentWin(data: TournamentWinUpdateInput!, where: TournamentWinWhereUniqueInput!): TournamentWin
  upsertTournamentWin(where: TournamentWinWhereUniqueInput!, create: TournamentWinCreateInput!, update: TournamentWinUpdateInput!): TournamentWin!
  deleteTournamentWin(where: TournamentWinWhereUniqueInput!): TournamentWin
  deleteManyTournamentWins(where: TournamentWinWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWin(data: WinCreateInput!): Win!
  updateWin(data: WinUpdateInput!, where: WinWhereUniqueInput!): Win
  upsertWin(where: WinWhereUniqueInput!, create: WinCreateInput!, update: WinUpdateInput!): Win!
  deleteWin(where: WinWhereUniqueInput!): Win
  deleteManyWins(where: WinWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  played: Int!
  goals: Int!
  assists: Int!
  saves: Int!
  team: Team!
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutPlayersInput!
  name: String!
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TeamCreateOneWithoutPlayersInput!
}

input PlayerCreateManyWithoutPostedByInput {
  create: [PlayerCreateWithoutPostedByInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateWithoutPostedByInput {
  id: ID
  name: String!
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TeamCreateOneWithoutPlayersInput!
}

input PlayerCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneWithoutPlayersInput!
  name: String!
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  played_ASC
  played_DESC
  goals_ASC
  goals_DESC
  assists_ASC
  assists_DESC
  saves_ASC
  saves_DESC
}

type PlayerPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  played: Int!
  goals: Int!
  assists: Int!
  saves: Int!
}

input PlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  played: Int
  played_not: Int
  played_in: [Int!]
  played_not_in: [Int!]
  played_lt: Int
  played_lte: Int
  played_gt: Int
  played_gte: Int
  goals: Int
  goals_not: Int
  goals_in: [Int!]
  goals_not_in: [Int!]
  goals_lt: Int
  goals_lte: Int
  goals_gt: Int
  goals_gte: Int
  assists: Int
  assists_not: Int
  assists_in: [Int!]
  assists_not_in: [Int!]
  assists_lt: Int
  assists_lte: Int
  assists_gt: Int
  assists_gte: Int
  saves: Int
  saves_not: Int
  saves_in: [Int!]
  saves_not_in: [Int!]
  saves_lt: Int
  saves_lte: Int
  saves_gt: Int
  saves_gte: Int
  AND: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  NOT: [PlayerScalarWhereInput!]
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
  OR: [PlayerSubscriptionWhereInput!]
  NOT: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateInput {
  postedBy: UserUpdateOneRequiredWithoutPlayersInput
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TeamUpdateOneRequiredWithoutPlayersInput
}

input PlayerUpdateManyDataInput {
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input PlayerUpdateManyMutationInput {
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input PlayerUpdateManyWithoutPostedByInput {
  create: [PlayerCreateWithoutPostedByInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyDataInput!
}

input PlayerUpdateWithoutPostedByDataInput {
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TeamUpdateOneRequiredWithoutPlayersInput
}

input PlayerUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredWithoutPlayersInput
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input PlayerUpdateWithWhereUniqueWithoutPostedByInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutPostedByDataInput!
}

input PlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutTeamDataInput!
}

input PlayerUpsertWithWhereUniqueWithoutPostedByInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutPostedByDataInput!
  create: PlayerCreateWithoutPostedByInput!
}

input PlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutTeamDataInput!
  create: PlayerCreateWithoutTeamInput!
}

input PlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  played: Int
  played_not: Int
  played_in: [Int!]
  played_not_in: [Int!]
  played_lt: Int
  played_lte: Int
  played_gt: Int
  played_gte: Int
  goals: Int
  goals_not: Int
  goals_in: [Int!]
  goals_not_in: [Int!]
  goals_lt: Int
  goals_lte: Int
  goals_gt: Int
  goals_gte: Int
  assists: Int
  assists_not: Int
  assists_in: [Int!]
  assists_not_in: [Int!]
  assists_lt: Int
  assists_lte: Int
  assists_gt: Int
  assists_gte: Int
  saves: Int
  saves_not: Int
  saves_in: [Int!]
  saves_not_in: [Int!]
  saves_lt: Int
  saves_lte: Int
  saves_gt: Int
  saves_gte: Int
  team: TeamWhereInput
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  league(where: LeagueWhereUniqueInput!): League
  leagues(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [League]!
  leaguesConnection(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeagueConnection!
  loss(where: LossWhereUniqueInput!): Loss
  losses(where: LossWhereInput, orderBy: LossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loss]!
  lossesConnection(where: LossWhereInput, orderBy: LossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LossConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  tie(where: TieWhereUniqueInput!): Tie
  ties(where: TieWhereInput, orderBy: TieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tie]!
  tiesConnection(where: TieWhereInput, orderBy: TieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TieConnection!
  tournament(where: TournamentWhereUniqueInput!): Tournament
  tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament]!
  tournamentsConnection(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentConnection!
  tournamentGame(where: TournamentGameWhereUniqueInput!): TournamentGame
  tournamentGames(where: TournamentGameWhereInput, orderBy: TournamentGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentGame]!
  tournamentGamesConnection(where: TournamentGameWhereInput, orderBy: TournamentGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentGameConnection!
  tournamentLoss(where: TournamentLossWhereUniqueInput!): TournamentLoss
  tournamentLosses(where: TournamentLossWhereInput, orderBy: TournamentLossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentLoss]!
  tournamentLossesConnection(where: TournamentLossWhereInput, orderBy: TournamentLossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentLossConnection!
  tournamentPlayer(where: TournamentPlayerWhereUniqueInput!): TournamentPlayer
  tournamentPlayers(where: TournamentPlayerWhereInput, orderBy: TournamentPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentPlayer]!
  tournamentPlayersConnection(where: TournamentPlayerWhereInput, orderBy: TournamentPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentPlayerConnection!
  tournamentTeam(where: TournamentTeamWhereUniqueInput!): TournamentTeam
  tournamentTeams(where: TournamentTeamWhereInput, orderBy: TournamentTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentTeam]!
  tournamentTeamsConnection(where: TournamentTeamWhereInput, orderBy: TournamentTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentTeamConnection!
  tournamentTie(where: TournamentTieWhereUniqueInput!): TournamentTie
  tournamentTies(where: TournamentTieWhereInput, orderBy: TournamentTieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentTie]!
  tournamentTiesConnection(where: TournamentTieWhereInput, orderBy: TournamentTieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentTieConnection!
  tournamentWin(where: TournamentWinWhereUniqueInput!): TournamentWin
  tournamentWins(where: TournamentWinWhereInput, orderBy: TournamentWinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentWin]!
  tournamentWinsConnection(where: TournamentWinWhereInput, orderBy: TournamentWinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentWinConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  win(where: WinWhereUniqueInput!): Win
  wins(where: WinWhereInput, orderBy: WinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Win]!
  winsConnection(where: WinWhereInput, orderBy: WinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WinConnection!
  node(id: ID!): Node
}

enum Role {
  SUPERADMIN
  ADMIN
  PLAYER
  USER
}

type Subscription {
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  league(where: LeagueSubscriptionWhereInput): LeagueSubscriptionPayload
  loss(where: LossSubscriptionWhereInput): LossSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  tie(where: TieSubscriptionWhereInput): TieSubscriptionPayload
  tournament(where: TournamentSubscriptionWhereInput): TournamentSubscriptionPayload
  tournamentGame(where: TournamentGameSubscriptionWhereInput): TournamentGameSubscriptionPayload
  tournamentLoss(where: TournamentLossSubscriptionWhereInput): TournamentLossSubscriptionPayload
  tournamentPlayer(where: TournamentPlayerSubscriptionWhereInput): TournamentPlayerSubscriptionPayload
  tournamentTeam(where: TournamentTeamSubscriptionWhereInput): TournamentTeamSubscriptionPayload
  tournamentTie(where: TournamentTieSubscriptionWhereInput): TournamentTieSubscriptionPayload
  tournamentWin(where: TournamentWinSubscriptionWhereInput): TournamentWinSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  win(where: WinSubscriptionWhereInput): WinSubscriptionPayload
}

type Team {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  wins(where: WinWhereInput, orderBy: WinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Win!]
  losses(where: LossWhereInput, orderBy: LossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loss!]
  ties(where: TieWhereInput, orderBy: TieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tie!]
  league: League!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  wins: WinCreateManyWithoutTeamInput
  losses: LossCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
  players: PlayerCreateManyWithoutTeamInput
}

input TeamCreateManyInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutPostedByInput {
  create: [TeamCreateWithoutPostedByInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutLossesInput {
  create: TeamCreateWithoutLossesInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutTiesInput {
  create: TeamCreateWithoutTiesInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutWinsInput {
  create: TeamCreateWithoutWinsInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutLeagueInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  wins: WinCreateManyWithoutTeamInput
  losses: LossCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  players: PlayerCreateManyWithoutTeamInput
}

input TeamCreateWithoutLossesInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  wins: WinCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
  players: PlayerCreateManyWithoutTeamInput
}

input TeamCreateWithoutPlayersInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  wins: WinCreateManyWithoutTeamInput
  losses: LossCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
}

input TeamCreateWithoutPostedByInput {
  id: ID
  name: String!
  wins: WinCreateManyWithoutTeamInput
  losses: LossCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
  players: PlayerCreateManyWithoutTeamInput
}

input TeamCreateWithoutTiesInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  wins: WinCreateManyWithoutTeamInput
  losses: LossCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
  players: PlayerCreateManyWithoutTeamInput
}

input TeamCreateWithoutWinsInput {
  id: ID
  postedBy: UserCreateOneWithoutTeamsInput!
  name: String!
  losses: LossCreateManyWithoutTeamInput
  ties: TieCreateManyWithoutTeamInput
  league: LeagueCreateOneWithoutTeamsInput!
  players: PlayerCreateManyWithoutTeamInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
}

input TeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  NOT: [TeamScalarWhereInput!]
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateManyDataInput {
  name: String
}

input TeamUpdateManyInput {
  create: [TeamCreateInput!]
  update: [TeamUpdateWithWhereUniqueNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueNestedInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutLeagueInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutLeagueInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithoutPostedByInput {
  create: [TeamCreateWithoutPostedByInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput!
  data: TeamUpdateManyDataInput!
}

input TeamUpdateOneRequiredInput {
  create: TeamCreateInput
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneRequiredWithoutLossesInput {
  create: TeamCreateWithoutLossesInput
  update: TeamUpdateWithoutLossesDataInput
  upsert: TeamUpsertWithoutLossesInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneRequiredWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  update: TeamUpdateWithoutPlayersDataInput
  upsert: TeamUpsertWithoutPlayersInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneRequiredWithoutTiesInput {
  create: TeamCreateWithoutTiesInput
  update: TeamUpdateWithoutTiesDataInput
  upsert: TeamUpsertWithoutTiesInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneRequiredWithoutWinsInput {
  create: TeamCreateWithoutWinsInput
  update: TeamUpdateWithoutWinsDataInput
  upsert: TeamUpsertWithoutWinsInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutLeagueDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutLossesDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutPlayersDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
}

input TeamUpdateWithoutPostedByDataInput {
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutTiesDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  wins: WinUpdateManyWithoutTeamInput
  losses: LossUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutWinsDataInput {
  postedBy: UserUpdateOneRequiredWithoutTeamsInput
  name: String
  losses: LossUpdateManyWithoutTeamInput
  ties: TieUpdateManyWithoutTeamInput
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateDataInput!
}

input TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutLeagueDataInput!
}

input TeamUpdateWithWhereUniqueWithoutPostedByInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutPostedByDataInput!
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithoutLossesInput {
  update: TeamUpdateWithoutLossesDataInput!
  create: TeamCreateWithoutLossesInput!
}

input TeamUpsertWithoutPlayersInput {
  update: TeamUpdateWithoutPlayersDataInput!
  create: TeamCreateWithoutPlayersInput!
}

input TeamUpsertWithoutTiesInput {
  update: TeamUpdateWithoutTiesDataInput!
  create: TeamCreateWithoutTiesInput!
}

input TeamUpsertWithoutWinsInput {
  update: TeamUpdateWithoutWinsDataInput!
  create: TeamCreateWithoutWinsInput!
}

input TeamUpsertWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutLeagueDataInput!
  create: TeamCreateWithoutLeagueInput!
}

input TeamUpsertWithWhereUniqueWithoutPostedByInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutPostedByDataInput!
  create: TeamCreateWithoutPostedByInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  wins_every: WinWhereInput
  wins_some: WinWhereInput
  wins_none: WinWhereInput
  losses_every: LossWhereInput
  losses_some: LossWhereInput
  losses_none: LossWhereInput
  ties_every: TieWhereInput
  ties_some: TieWhereInput
  ties_none: TieWhereInput
  league: LeagueWhereInput
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type Tie {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: Team!
  game: Game!
}

type TieConnection {
  pageInfo: PageInfo!
  edges: [TieEdge]!
  aggregate: AggregateTie!
}

input TieCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutTiesInput!
  game: GameCreateOneWithoutTiesInput!
}

input TieCreateManyWithoutGameInput {
  create: [TieCreateWithoutGameInput!]
  connect: [TieWhereUniqueInput!]
}

input TieCreateManyWithoutTeamInput {
  create: [TieCreateWithoutTeamInput!]
  connect: [TieWhereUniqueInput!]
}

input TieCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutTiesInput!
}

input TieCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: GameCreateOneWithoutTiesInput!
}

type TieEdge {
  node: Tie!
  cursor: String!
}

enum TieOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TiePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input TieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TieScalarWhereInput!]
  OR: [TieScalarWhereInput!]
  NOT: [TieScalarWhereInput!]
}

type TieSubscriptionPayload {
  mutation: MutationType!
  node: Tie
  updatedFields: [String!]
  previousValues: TiePreviousValues
}

input TieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TieWhereInput
  AND: [TieSubscriptionWhereInput!]
  OR: [TieSubscriptionWhereInput!]
  NOT: [TieSubscriptionWhereInput!]
}

input TieUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutTiesInput
  game: GameUpdateOneRequiredWithoutTiesInput
}

input TieUpdateManyWithoutGameInput {
  create: [TieCreateWithoutGameInput!]
  delete: [TieWhereUniqueInput!]
  connect: [TieWhereUniqueInput!]
  set: [TieWhereUniqueInput!]
  disconnect: [TieWhereUniqueInput!]
  update: [TieUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [TieUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [TieScalarWhereInput!]
}

input TieUpdateManyWithoutTeamInput {
  create: [TieCreateWithoutTeamInput!]
  delete: [TieWhereUniqueInput!]
  connect: [TieWhereUniqueInput!]
  set: [TieWhereUniqueInput!]
  disconnect: [TieWhereUniqueInput!]
  update: [TieUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TieUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TieScalarWhereInput!]
}

input TieUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutTiesInput
}

input TieUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutTiesInput
}

input TieUpdateWithWhereUniqueWithoutGameInput {
  where: TieWhereUniqueInput!
  data: TieUpdateWithoutGameDataInput!
}

input TieUpdateWithWhereUniqueWithoutTeamInput {
  where: TieWhereUniqueInput!
  data: TieUpdateWithoutTeamDataInput!
}

input TieUpsertWithWhereUniqueWithoutGameInput {
  where: TieWhereUniqueInput!
  update: TieUpdateWithoutGameDataInput!
  create: TieCreateWithoutGameInput!
}

input TieUpsertWithWhereUniqueWithoutTeamInput {
  where: TieWhereUniqueInput!
  update: TieUpdateWithoutTeamDataInput!
  create: TieCreateWithoutTeamInput!
}

input TieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TeamWhereInput
  game: GameWhereInput
  AND: [TieWhereInput!]
  OR: [TieWhereInput!]
  NOT: [TieWhereInput!]
}

input TieWhereUniqueInput {
  id: ID
}

type Tournament {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  day: String!
  location: String!
}

type TournamentConnection {
  pageInfo: PageInfo!
  edges: [TournamentEdge]!
  aggregate: AggregateTournament!
}

input TournamentCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  teams: TeamCreateManyInput
  day: String!
  location: String!
}

input TournamentCreateOneInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
}

type TournamentEdge {
  node: Tournament!
  cursor: String!
}

type TournamentGame {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  homeTeam: TournamentTeam!
  awayTeam: TournamentTeam!
  score: String!
  day: String!
  time: String!
  videoURL: String!
  tournament: Tournament!
  wins(where: TournamentWinWhereInput, orderBy: TournamentWinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentWin!]
  losses(where: TournamentLossWhereInput, orderBy: TournamentLossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentLoss!]
  ties(where: TournamentTieWhereInput, orderBy: TournamentTieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentTie!]
}

type TournamentGameConnection {
  pageInfo: PageInfo!
  edges: [TournamentGameEdge]!
  aggregate: AggregateTournamentGame!
}

input TournamentGameCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  homeTeam: TournamentTeamCreateOneInput!
  awayTeam: TournamentTeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  tournament: TournamentCreateOneInput!
  wins: TournamentWinCreateManyWithoutGameInput
  losses: TournamentLossCreateManyWithoutGameInput
  ties: TournamentTieCreateManyWithoutGameInput
}

input TournamentGameCreateOneWithoutLossesInput {
  create: TournamentGameCreateWithoutLossesInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameCreateOneWithoutTiesInput {
  create: TournamentGameCreateWithoutTiesInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameCreateOneWithoutWinsInput {
  create: TournamentGameCreateWithoutWinsInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameCreateWithoutLossesInput {
  id: ID
  postedBy: UserCreateOneInput!
  homeTeam: TournamentTeamCreateOneInput!
  awayTeam: TournamentTeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  tournament: TournamentCreateOneInput!
  wins: TournamentWinCreateManyWithoutGameInput
  ties: TournamentTieCreateManyWithoutGameInput
}

input TournamentGameCreateWithoutTiesInput {
  id: ID
  postedBy: UserCreateOneInput!
  homeTeam: TournamentTeamCreateOneInput!
  awayTeam: TournamentTeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  tournament: TournamentCreateOneInput!
  wins: TournamentWinCreateManyWithoutGameInput
  losses: TournamentLossCreateManyWithoutGameInput
}

input TournamentGameCreateWithoutWinsInput {
  id: ID
  postedBy: UserCreateOneInput!
  homeTeam: TournamentTeamCreateOneInput!
  awayTeam: TournamentTeamCreateOneInput!
  score: String
  day: String!
  time: String
  videoURL: String
  tournament: TournamentCreateOneInput!
  losses: TournamentLossCreateManyWithoutGameInput
  ties: TournamentTieCreateManyWithoutGameInput
}

type TournamentGameEdge {
  node: TournamentGame!
  cursor: String!
}

enum TournamentGameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  day_ASC
  day_DESC
  time_ASC
  time_DESC
  videoURL_ASC
  videoURL_DESC
}

type TournamentGamePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  score: String!
  day: String!
  time: String!
  videoURL: String!
}

type TournamentGameSubscriptionPayload {
  mutation: MutationType!
  node: TournamentGame
  updatedFields: [String!]
  previousValues: TournamentGamePreviousValues
}

input TournamentGameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentGameWhereInput
  AND: [TournamentGameSubscriptionWhereInput!]
  OR: [TournamentGameSubscriptionWhereInput!]
  NOT: [TournamentGameSubscriptionWhereInput!]
}

input TournamentGameUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  homeTeam: TournamentTeamUpdateOneRequiredInput
  awayTeam: TournamentTeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  tournament: TournamentUpdateOneRequiredInput
  wins: TournamentWinUpdateManyWithoutGameInput
  losses: TournamentLossUpdateManyWithoutGameInput
  ties: TournamentTieUpdateManyWithoutGameInput
}

input TournamentGameUpdateManyMutationInput {
  score: String
  day: String
  time: String
  videoURL: String
}

input TournamentGameUpdateOneRequiredWithoutLossesInput {
  create: TournamentGameCreateWithoutLossesInput
  update: TournamentGameUpdateWithoutLossesDataInput
  upsert: TournamentGameUpsertWithoutLossesInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameUpdateOneRequiredWithoutTiesInput {
  create: TournamentGameCreateWithoutTiesInput
  update: TournamentGameUpdateWithoutTiesDataInput
  upsert: TournamentGameUpsertWithoutTiesInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameUpdateOneRequiredWithoutWinsInput {
  create: TournamentGameCreateWithoutWinsInput
  update: TournamentGameUpdateWithoutWinsDataInput
  upsert: TournamentGameUpsertWithoutWinsInput
  connect: TournamentGameWhereUniqueInput
}

input TournamentGameUpdateWithoutLossesDataInput {
  postedBy: UserUpdateOneRequiredInput
  homeTeam: TournamentTeamUpdateOneRequiredInput
  awayTeam: TournamentTeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  tournament: TournamentUpdateOneRequiredInput
  wins: TournamentWinUpdateManyWithoutGameInput
  ties: TournamentTieUpdateManyWithoutGameInput
}

input TournamentGameUpdateWithoutTiesDataInput {
  postedBy: UserUpdateOneRequiredInput
  homeTeam: TournamentTeamUpdateOneRequiredInput
  awayTeam: TournamentTeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  tournament: TournamentUpdateOneRequiredInput
  wins: TournamentWinUpdateManyWithoutGameInput
  losses: TournamentLossUpdateManyWithoutGameInput
}

input TournamentGameUpdateWithoutWinsDataInput {
  postedBy: UserUpdateOneRequiredInput
  homeTeam: TournamentTeamUpdateOneRequiredInput
  awayTeam: TournamentTeamUpdateOneRequiredInput
  score: String
  day: String
  time: String
  videoURL: String
  tournament: TournamentUpdateOneRequiredInput
  losses: TournamentLossUpdateManyWithoutGameInput
  ties: TournamentTieUpdateManyWithoutGameInput
}

input TournamentGameUpsertWithoutLossesInput {
  update: TournamentGameUpdateWithoutLossesDataInput!
  create: TournamentGameCreateWithoutLossesInput!
}

input TournamentGameUpsertWithoutTiesInput {
  update: TournamentGameUpdateWithoutTiesDataInput!
  create: TournamentGameCreateWithoutTiesInput!
}

input TournamentGameUpsertWithoutWinsInput {
  update: TournamentGameUpdateWithoutWinsDataInput!
  create: TournamentGameCreateWithoutWinsInput!
}

input TournamentGameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  homeTeam: TournamentTeamWhereInput
  awayTeam: TournamentTeamWhereInput
  score: String
  score_not: String
  score_in: [String!]
  score_not_in: [String!]
  score_lt: String
  score_lte: String
  score_gt: String
  score_gte: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  videoURL: String
  videoURL_not: String
  videoURL_in: [String!]
  videoURL_not_in: [String!]
  videoURL_lt: String
  videoURL_lte: String
  videoURL_gt: String
  videoURL_gte: String
  videoURL_contains: String
  videoURL_not_contains: String
  videoURL_starts_with: String
  videoURL_not_starts_with: String
  videoURL_ends_with: String
  videoURL_not_ends_with: String
  tournament: TournamentWhereInput
  wins_every: TournamentWinWhereInput
  wins_some: TournamentWinWhereInput
  wins_none: TournamentWinWhereInput
  losses_every: TournamentLossWhereInput
  losses_some: TournamentLossWhereInput
  losses_none: TournamentLossWhereInput
  ties_every: TournamentTieWhereInput
  ties_some: TournamentTieWhereInput
  ties_none: TournamentTieWhereInput
  AND: [TournamentGameWhereInput!]
  OR: [TournamentGameWhereInput!]
  NOT: [TournamentGameWhereInput!]
}

input TournamentGameWhereUniqueInput {
  id: ID
}

type TournamentLoss {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: TournamentTeam!
  game: TournamentGame!
}

type TournamentLossConnection {
  pageInfo: PageInfo!
  edges: [TournamentLossEdge]!
  aggregate: AggregateTournamentLoss!
}

input TournamentLossCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutLossesInput!
  game: TournamentGameCreateOneWithoutLossesInput!
}

input TournamentLossCreateManyWithoutGameInput {
  create: [TournamentLossCreateWithoutGameInput!]
  connect: [TournamentLossWhereUniqueInput!]
}

input TournamentLossCreateManyWithoutTeamInput {
  create: [TournamentLossCreateWithoutTeamInput!]
  connect: [TournamentLossWhereUniqueInput!]
}

input TournamentLossCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutLossesInput!
}

input TournamentLossCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: TournamentGameCreateOneWithoutLossesInput!
}

type TournamentLossEdge {
  node: TournamentLoss!
  cursor: String!
}

enum TournamentLossOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentLossPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input TournamentLossScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TournamentLossScalarWhereInput!]
  OR: [TournamentLossScalarWhereInput!]
  NOT: [TournamentLossScalarWhereInput!]
}

type TournamentLossSubscriptionPayload {
  mutation: MutationType!
  node: TournamentLoss
  updatedFields: [String!]
  previousValues: TournamentLossPreviousValues
}

input TournamentLossSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentLossWhereInput
  AND: [TournamentLossSubscriptionWhereInput!]
  OR: [TournamentLossSubscriptionWhereInput!]
  NOT: [TournamentLossSubscriptionWhereInput!]
}

input TournamentLossUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutLossesInput
  game: TournamentGameUpdateOneRequiredWithoutLossesInput
}

input TournamentLossUpdateManyWithoutGameInput {
  create: [TournamentLossCreateWithoutGameInput!]
  delete: [TournamentLossWhereUniqueInput!]
  connect: [TournamentLossWhereUniqueInput!]
  set: [TournamentLossWhereUniqueInput!]
  disconnect: [TournamentLossWhereUniqueInput!]
  update: [TournamentLossUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [TournamentLossUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [TournamentLossScalarWhereInput!]
}

input TournamentLossUpdateManyWithoutTeamInput {
  create: [TournamentLossCreateWithoutTeamInput!]
  delete: [TournamentLossWhereUniqueInput!]
  connect: [TournamentLossWhereUniqueInput!]
  set: [TournamentLossWhereUniqueInput!]
  disconnect: [TournamentLossWhereUniqueInput!]
  update: [TournamentLossUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TournamentLossUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TournamentLossScalarWhereInput!]
}

input TournamentLossUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutLossesInput
}

input TournamentLossUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: TournamentGameUpdateOneRequiredWithoutLossesInput
}

input TournamentLossUpdateWithWhereUniqueWithoutGameInput {
  where: TournamentLossWhereUniqueInput!
  data: TournamentLossUpdateWithoutGameDataInput!
}

input TournamentLossUpdateWithWhereUniqueWithoutTeamInput {
  where: TournamentLossWhereUniqueInput!
  data: TournamentLossUpdateWithoutTeamDataInput!
}

input TournamentLossUpsertWithWhereUniqueWithoutGameInput {
  where: TournamentLossWhereUniqueInput!
  update: TournamentLossUpdateWithoutGameDataInput!
  create: TournamentLossCreateWithoutGameInput!
}

input TournamentLossUpsertWithWhereUniqueWithoutTeamInput {
  where: TournamentLossWhereUniqueInput!
  update: TournamentLossUpdateWithoutTeamDataInput!
  create: TournamentLossCreateWithoutTeamInput!
}

input TournamentLossWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TournamentTeamWhereInput
  game: TournamentGameWhereInput
  AND: [TournamentLossWhereInput!]
  OR: [TournamentLossWhereInput!]
  NOT: [TournamentLossWhereInput!]
}

input TournamentLossWhereUniqueInput {
  id: ID
}

enum TournamentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  day_ASC
  day_DESC
  location_ASC
  location_DESC
}

type TournamentPlayer {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  played: Int!
  goals: Int!
  assists: Int!
  saves: Int!
  team: TournamentTeam!
}

type TournamentPlayerConnection {
  pageInfo: PageInfo!
  edges: [TournamentPlayerEdge]!
  aggregate: AggregateTournamentPlayer!
}

input TournamentPlayerCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TournamentTeamCreateOneWithoutPlayersInput!
}

input TournamentPlayerCreateManyWithoutTeamInput {
  create: [TournamentPlayerCreateWithoutTeamInput!]
  connect: [TournamentPlayerWhereUniqueInput!]
}

input TournamentPlayerCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

type TournamentPlayerEdge {
  node: TournamentPlayer!
  cursor: String!
}

enum TournamentPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  played_ASC
  played_DESC
  goals_ASC
  goals_DESC
  assists_ASC
  assists_DESC
  saves_ASC
  saves_DESC
}

type TournamentPlayerPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  played: Int!
  goals: Int!
  assists: Int!
  saves: Int!
}

input TournamentPlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  played: Int
  played_not: Int
  played_in: [Int!]
  played_not_in: [Int!]
  played_lt: Int
  played_lte: Int
  played_gt: Int
  played_gte: Int
  goals: Int
  goals_not: Int
  goals_in: [Int!]
  goals_not_in: [Int!]
  goals_lt: Int
  goals_lte: Int
  goals_gt: Int
  goals_gte: Int
  assists: Int
  assists_not: Int
  assists_in: [Int!]
  assists_not_in: [Int!]
  assists_lt: Int
  assists_lte: Int
  assists_gt: Int
  assists_gte: Int
  saves: Int
  saves_not: Int
  saves_in: [Int!]
  saves_not_in: [Int!]
  saves_lt: Int
  saves_lte: Int
  saves_gt: Int
  saves_gte: Int
  AND: [TournamentPlayerScalarWhereInput!]
  OR: [TournamentPlayerScalarWhereInput!]
  NOT: [TournamentPlayerScalarWhereInput!]
}

type TournamentPlayerSubscriptionPayload {
  mutation: MutationType!
  node: TournamentPlayer
  updatedFields: [String!]
  previousValues: TournamentPlayerPreviousValues
}

input TournamentPlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentPlayerWhereInput
  AND: [TournamentPlayerSubscriptionWhereInput!]
  OR: [TournamentPlayerSubscriptionWhereInput!]
  NOT: [TournamentPlayerSubscriptionWhereInput!]
}

input TournamentPlayerUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
  team: TournamentTeamUpdateOneRequiredWithoutPlayersInput
}

input TournamentPlayerUpdateManyDataInput {
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input TournamentPlayerUpdateManyMutationInput {
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input TournamentPlayerUpdateManyWithoutTeamInput {
  create: [TournamentPlayerCreateWithoutTeamInput!]
  delete: [TournamentPlayerWhereUniqueInput!]
  connect: [TournamentPlayerWhereUniqueInput!]
  set: [TournamentPlayerWhereUniqueInput!]
  disconnect: [TournamentPlayerWhereUniqueInput!]
  update: [TournamentPlayerUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TournamentPlayerUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TournamentPlayerScalarWhereInput!]
  updateMany: [TournamentPlayerUpdateManyWithWhereNestedInput!]
}

input TournamentPlayerUpdateManyWithWhereNestedInput {
  where: TournamentPlayerScalarWhereInput!
  data: TournamentPlayerUpdateManyDataInput!
}

input TournamentPlayerUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  played: Int
  goals: Int
  assists: Int
  saves: Int
}

input TournamentPlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: TournamentPlayerWhereUniqueInput!
  data: TournamentPlayerUpdateWithoutTeamDataInput!
}

input TournamentPlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: TournamentPlayerWhereUniqueInput!
  update: TournamentPlayerUpdateWithoutTeamDataInput!
  create: TournamentPlayerCreateWithoutTeamInput!
}

input TournamentPlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  played: Int
  played_not: Int
  played_in: [Int!]
  played_not_in: [Int!]
  played_lt: Int
  played_lte: Int
  played_gt: Int
  played_gte: Int
  goals: Int
  goals_not: Int
  goals_in: [Int!]
  goals_not_in: [Int!]
  goals_lt: Int
  goals_lte: Int
  goals_gt: Int
  goals_gte: Int
  assists: Int
  assists_not: Int
  assists_in: [Int!]
  assists_not_in: [Int!]
  assists_lt: Int
  assists_lte: Int
  assists_gt: Int
  assists_gte: Int
  saves: Int
  saves_not: Int
  saves_in: [Int!]
  saves_not_in: [Int!]
  saves_lt: Int
  saves_lte: Int
  saves_gt: Int
  saves_gte: Int
  team: TournamentTeamWhereInput
  AND: [TournamentPlayerWhereInput!]
  OR: [TournamentPlayerWhereInput!]
  NOT: [TournamentPlayerWhereInput!]
}

input TournamentPlayerWhereUniqueInput {
  id: ID
}

type TournamentPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  day: String!
  location: String!
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
  updatedFields: [String!]
  previousValues: TournamentPreviousValues
}

input TournamentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentWhereInput
  AND: [TournamentSubscriptionWhereInput!]
  OR: [TournamentSubscriptionWhereInput!]
  NOT: [TournamentSubscriptionWhereInput!]
}

type TournamentTeam {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  name: String!
  wins(where: TournamentWinWhereInput, orderBy: TournamentWinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentWin!]
  losses(where: TournamentLossWhereInput, orderBy: TournamentLossOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentLoss!]
  ties(where: TournamentTieWhereInput, orderBy: TournamentTieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentTie!]
  players(where: TournamentPlayerWhereInput, orderBy: TournamentPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentPlayer!]
}

type TournamentTeamConnection {
  pageInfo: PageInfo!
  edges: [TournamentTeamEdge]!
  aggregate: AggregateTournamentTeam!
}

input TournamentTeamCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  wins: TournamentWinCreateManyWithoutTeamInput
  losses: TournamentLossCreateManyWithoutTeamInput
  ties: TournamentTieCreateManyWithoutTeamInput
  players: TournamentPlayerCreateManyWithoutTeamInput
}

input TournamentTeamCreateOneInput {
  create: TournamentTeamCreateInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamCreateOneWithoutLossesInput {
  create: TournamentTeamCreateWithoutLossesInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamCreateOneWithoutPlayersInput {
  create: TournamentTeamCreateWithoutPlayersInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamCreateOneWithoutTiesInput {
  create: TournamentTeamCreateWithoutTiesInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamCreateOneWithoutWinsInput {
  create: TournamentTeamCreateWithoutWinsInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamCreateWithoutLossesInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  wins: TournamentWinCreateManyWithoutTeamInput
  ties: TournamentTieCreateManyWithoutTeamInput
  players: TournamentPlayerCreateManyWithoutTeamInput
}

input TournamentTeamCreateWithoutPlayersInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  wins: TournamentWinCreateManyWithoutTeamInput
  losses: TournamentLossCreateManyWithoutTeamInput
  ties: TournamentTieCreateManyWithoutTeamInput
}

input TournamentTeamCreateWithoutTiesInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  wins: TournamentWinCreateManyWithoutTeamInput
  losses: TournamentLossCreateManyWithoutTeamInput
  players: TournamentPlayerCreateManyWithoutTeamInput
}

input TournamentTeamCreateWithoutWinsInput {
  id: ID
  postedBy: UserCreateOneInput!
  name: String!
  losses: TournamentLossCreateManyWithoutTeamInput
  ties: TournamentTieCreateManyWithoutTeamInput
  players: TournamentPlayerCreateManyWithoutTeamInput
}

type TournamentTeamEdge {
  node: TournamentTeam!
  cursor: String!
}

enum TournamentTeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TournamentTeamPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
}

type TournamentTeamSubscriptionPayload {
  mutation: MutationType!
  node: TournamentTeam
  updatedFields: [String!]
  previousValues: TournamentTeamPreviousValues
}

input TournamentTeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentTeamWhereInput
  AND: [TournamentTeamSubscriptionWhereInput!]
  OR: [TournamentTeamSubscriptionWhereInput!]
  NOT: [TournamentTeamSubscriptionWhereInput!]
}

input TournamentTeamUpdateDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  wins: TournamentWinUpdateManyWithoutTeamInput
  losses: TournamentLossUpdateManyWithoutTeamInput
  ties: TournamentTieUpdateManyWithoutTeamInput
  players: TournamentPlayerUpdateManyWithoutTeamInput
}

input TournamentTeamUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  wins: TournamentWinUpdateManyWithoutTeamInput
  losses: TournamentLossUpdateManyWithoutTeamInput
  ties: TournamentTieUpdateManyWithoutTeamInput
  players: TournamentPlayerUpdateManyWithoutTeamInput
}

input TournamentTeamUpdateManyMutationInput {
  name: String
}

input TournamentTeamUpdateOneRequiredInput {
  create: TournamentTeamCreateInput
  update: TournamentTeamUpdateDataInput
  upsert: TournamentTeamUpsertNestedInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamUpdateOneRequiredWithoutLossesInput {
  create: TournamentTeamCreateWithoutLossesInput
  update: TournamentTeamUpdateWithoutLossesDataInput
  upsert: TournamentTeamUpsertWithoutLossesInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamUpdateOneRequiredWithoutPlayersInput {
  create: TournamentTeamCreateWithoutPlayersInput
  update: TournamentTeamUpdateWithoutPlayersDataInput
  upsert: TournamentTeamUpsertWithoutPlayersInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamUpdateOneRequiredWithoutTiesInput {
  create: TournamentTeamCreateWithoutTiesInput
  update: TournamentTeamUpdateWithoutTiesDataInput
  upsert: TournamentTeamUpsertWithoutTiesInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamUpdateOneRequiredWithoutWinsInput {
  create: TournamentTeamCreateWithoutWinsInput
  update: TournamentTeamUpdateWithoutWinsDataInput
  upsert: TournamentTeamUpsertWithoutWinsInput
  connect: TournamentTeamWhereUniqueInput
}

input TournamentTeamUpdateWithoutLossesDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  wins: TournamentWinUpdateManyWithoutTeamInput
  ties: TournamentTieUpdateManyWithoutTeamInput
  players: TournamentPlayerUpdateManyWithoutTeamInput
}

input TournamentTeamUpdateWithoutPlayersDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  wins: TournamentWinUpdateManyWithoutTeamInput
  losses: TournamentLossUpdateManyWithoutTeamInput
  ties: TournamentTieUpdateManyWithoutTeamInput
}

input TournamentTeamUpdateWithoutTiesDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  wins: TournamentWinUpdateManyWithoutTeamInput
  losses: TournamentLossUpdateManyWithoutTeamInput
  players: TournamentPlayerUpdateManyWithoutTeamInput
}

input TournamentTeamUpdateWithoutWinsDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  losses: TournamentLossUpdateManyWithoutTeamInput
  ties: TournamentTieUpdateManyWithoutTeamInput
  players: TournamentPlayerUpdateManyWithoutTeamInput
}

input TournamentTeamUpsertNestedInput {
  update: TournamentTeamUpdateDataInput!
  create: TournamentTeamCreateInput!
}

input TournamentTeamUpsertWithoutLossesInput {
  update: TournamentTeamUpdateWithoutLossesDataInput!
  create: TournamentTeamCreateWithoutLossesInput!
}

input TournamentTeamUpsertWithoutPlayersInput {
  update: TournamentTeamUpdateWithoutPlayersDataInput!
  create: TournamentTeamCreateWithoutPlayersInput!
}

input TournamentTeamUpsertWithoutTiesInput {
  update: TournamentTeamUpdateWithoutTiesDataInput!
  create: TournamentTeamCreateWithoutTiesInput!
}

input TournamentTeamUpsertWithoutWinsInput {
  update: TournamentTeamUpdateWithoutWinsDataInput!
  create: TournamentTeamCreateWithoutWinsInput!
}

input TournamentTeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  wins_every: TournamentWinWhereInput
  wins_some: TournamentWinWhereInput
  wins_none: TournamentWinWhereInput
  losses_every: TournamentLossWhereInput
  losses_some: TournamentLossWhereInput
  losses_none: TournamentLossWhereInput
  ties_every: TournamentTieWhereInput
  ties_some: TournamentTieWhereInput
  ties_none: TournamentTieWhereInput
  players_every: TournamentPlayerWhereInput
  players_some: TournamentPlayerWhereInput
  players_none: TournamentPlayerWhereInput
  AND: [TournamentTeamWhereInput!]
  OR: [TournamentTeamWhereInput!]
  NOT: [TournamentTeamWhereInput!]
}

input TournamentTeamWhereUniqueInput {
  id: ID
  name: String
}

type TournamentTie {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: TournamentTeam!
  game: TournamentGame!
}

type TournamentTieConnection {
  pageInfo: PageInfo!
  edges: [TournamentTieEdge]!
  aggregate: AggregateTournamentTie!
}

input TournamentTieCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutTiesInput!
  game: TournamentGameCreateOneWithoutTiesInput!
}

input TournamentTieCreateManyWithoutGameInput {
  create: [TournamentTieCreateWithoutGameInput!]
  connect: [TournamentTieWhereUniqueInput!]
}

input TournamentTieCreateManyWithoutTeamInput {
  create: [TournamentTieCreateWithoutTeamInput!]
  connect: [TournamentTieWhereUniqueInput!]
}

input TournamentTieCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutTiesInput!
}

input TournamentTieCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: TournamentGameCreateOneWithoutTiesInput!
}

type TournamentTieEdge {
  node: TournamentTie!
  cursor: String!
}

enum TournamentTieOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentTiePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input TournamentTieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TournamentTieScalarWhereInput!]
  OR: [TournamentTieScalarWhereInput!]
  NOT: [TournamentTieScalarWhereInput!]
}

type TournamentTieSubscriptionPayload {
  mutation: MutationType!
  node: TournamentTie
  updatedFields: [String!]
  previousValues: TournamentTiePreviousValues
}

input TournamentTieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentTieWhereInput
  AND: [TournamentTieSubscriptionWhereInput!]
  OR: [TournamentTieSubscriptionWhereInput!]
  NOT: [TournamentTieSubscriptionWhereInput!]
}

input TournamentTieUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutTiesInput
  game: TournamentGameUpdateOneRequiredWithoutTiesInput
}

input TournamentTieUpdateManyWithoutGameInput {
  create: [TournamentTieCreateWithoutGameInput!]
  delete: [TournamentTieWhereUniqueInput!]
  connect: [TournamentTieWhereUniqueInput!]
  set: [TournamentTieWhereUniqueInput!]
  disconnect: [TournamentTieWhereUniqueInput!]
  update: [TournamentTieUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [TournamentTieUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [TournamentTieScalarWhereInput!]
}

input TournamentTieUpdateManyWithoutTeamInput {
  create: [TournamentTieCreateWithoutTeamInput!]
  delete: [TournamentTieWhereUniqueInput!]
  connect: [TournamentTieWhereUniqueInput!]
  set: [TournamentTieWhereUniqueInput!]
  disconnect: [TournamentTieWhereUniqueInput!]
  update: [TournamentTieUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TournamentTieUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TournamentTieScalarWhereInput!]
}

input TournamentTieUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutTiesInput
}

input TournamentTieUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: TournamentGameUpdateOneRequiredWithoutTiesInput
}

input TournamentTieUpdateWithWhereUniqueWithoutGameInput {
  where: TournamentTieWhereUniqueInput!
  data: TournamentTieUpdateWithoutGameDataInput!
}

input TournamentTieUpdateWithWhereUniqueWithoutTeamInput {
  where: TournamentTieWhereUniqueInput!
  data: TournamentTieUpdateWithoutTeamDataInput!
}

input TournamentTieUpsertWithWhereUniqueWithoutGameInput {
  where: TournamentTieWhereUniqueInput!
  update: TournamentTieUpdateWithoutGameDataInput!
  create: TournamentTieCreateWithoutGameInput!
}

input TournamentTieUpsertWithWhereUniqueWithoutTeamInput {
  where: TournamentTieWhereUniqueInput!
  update: TournamentTieUpdateWithoutTeamDataInput!
  create: TournamentTieCreateWithoutTeamInput!
}

input TournamentTieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TournamentTeamWhereInput
  game: TournamentGameWhereInput
  AND: [TournamentTieWhereInput!]
  OR: [TournamentTieWhereInput!]
  NOT: [TournamentTieWhereInput!]
}

input TournamentTieWhereUniqueInput {
  id: ID
}

input TournamentUpdateDataInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  teams: TeamUpdateManyInput
  day: String
  location: String
}

input TournamentUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  name: String
  teams: TeamUpdateManyInput
  day: String
  location: String
}

input TournamentUpdateManyMutationInput {
  name: String
  day: String
  location: String
}

input TournamentUpdateOneRequiredInput {
  create: TournamentCreateInput
  update: TournamentUpdateDataInput
  upsert: TournamentUpsertNestedInput
  connect: TournamentWhereUniqueInput
}

input TournamentUpsertNestedInput {
  update: TournamentUpdateDataInput!
  create: TournamentCreateInput!
}

input TournamentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [TournamentWhereInput!]
  OR: [TournamentWhereInput!]
  NOT: [TournamentWhereInput!]
}

input TournamentWhereUniqueInput {
  id: ID
  name: String
}

type TournamentWin {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: TournamentTeam!
  game: TournamentGame!
}

type TournamentWinConnection {
  pageInfo: PageInfo!
  edges: [TournamentWinEdge]!
  aggregate: AggregateTournamentWin!
}

input TournamentWinCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutWinsInput!
  game: TournamentGameCreateOneWithoutWinsInput!
}

input TournamentWinCreateManyWithoutGameInput {
  create: [TournamentWinCreateWithoutGameInput!]
  connect: [TournamentWinWhereUniqueInput!]
}

input TournamentWinCreateManyWithoutTeamInput {
  create: [TournamentWinCreateWithoutTeamInput!]
  connect: [TournamentWinWhereUniqueInput!]
}

input TournamentWinCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TournamentTeamCreateOneWithoutWinsInput!
}

input TournamentWinCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: TournamentGameCreateOneWithoutWinsInput!
}

type TournamentWinEdge {
  node: TournamentWin!
  cursor: String!
}

enum TournamentWinOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentWinPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input TournamentWinScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TournamentWinScalarWhereInput!]
  OR: [TournamentWinScalarWhereInput!]
  NOT: [TournamentWinScalarWhereInput!]
}

type TournamentWinSubscriptionPayload {
  mutation: MutationType!
  node: TournamentWin
  updatedFields: [String!]
  previousValues: TournamentWinPreviousValues
}

input TournamentWinSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentWinWhereInput
  AND: [TournamentWinSubscriptionWhereInput!]
  OR: [TournamentWinSubscriptionWhereInput!]
  NOT: [TournamentWinSubscriptionWhereInput!]
}

input TournamentWinUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutWinsInput
  game: TournamentGameUpdateOneRequiredWithoutWinsInput
}

input TournamentWinUpdateManyWithoutGameInput {
  create: [TournamentWinCreateWithoutGameInput!]
  delete: [TournamentWinWhereUniqueInput!]
  connect: [TournamentWinWhereUniqueInput!]
  set: [TournamentWinWhereUniqueInput!]
  disconnect: [TournamentWinWhereUniqueInput!]
  update: [TournamentWinUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [TournamentWinUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [TournamentWinScalarWhereInput!]
}

input TournamentWinUpdateManyWithoutTeamInput {
  create: [TournamentWinCreateWithoutTeamInput!]
  delete: [TournamentWinWhereUniqueInput!]
  connect: [TournamentWinWhereUniqueInput!]
  set: [TournamentWinWhereUniqueInput!]
  disconnect: [TournamentWinWhereUniqueInput!]
  update: [TournamentWinUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TournamentWinUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TournamentWinScalarWhereInput!]
}

input TournamentWinUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TournamentTeamUpdateOneRequiredWithoutWinsInput
}

input TournamentWinUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: TournamentGameUpdateOneRequiredWithoutWinsInput
}

input TournamentWinUpdateWithWhereUniqueWithoutGameInput {
  where: TournamentWinWhereUniqueInput!
  data: TournamentWinUpdateWithoutGameDataInput!
}

input TournamentWinUpdateWithWhereUniqueWithoutTeamInput {
  where: TournamentWinWhereUniqueInput!
  data: TournamentWinUpdateWithoutTeamDataInput!
}

input TournamentWinUpsertWithWhereUniqueWithoutGameInput {
  where: TournamentWinWhereUniqueInput!
  update: TournamentWinUpdateWithoutGameDataInput!
  create: TournamentWinCreateWithoutGameInput!
}

input TournamentWinUpsertWithWhereUniqueWithoutTeamInput {
  where: TournamentWinWhereUniqueInput!
  update: TournamentWinUpdateWithoutTeamDataInput!
  create: TournamentWinCreateWithoutTeamInput!
}

input TournamentWinWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TournamentTeamWhereInput
  game: TournamentGameWhereInput
  AND: [TournamentWinWhereInput!]
  OR: [TournamentWinWhereInput!]
  NOT: [TournamentWinWhereInput!]
}

input TournamentWinWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  password: String!
  email: String!
  role: Role!
  leagues(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [League!]
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: Role
  leagues: LeagueCreateManyWithoutPostedByInput
  teams: TeamCreateManyWithoutPostedByInput
  players: PlayerCreateManyWithoutPostedByInput
  games: GameCreateManyWithoutPostedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLeaguesInput {
  create: UserCreateWithoutLeaguesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlayersInput {
  create: UserCreateWithoutPlayersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTeamsInput {
  create: UserCreateWithoutTeamsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGamesInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: Role
  leagues: LeagueCreateManyWithoutPostedByInput
  teams: TeamCreateManyWithoutPostedByInput
  players: PlayerCreateManyWithoutPostedByInput
}

input UserCreateWithoutLeaguesInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: Role
  teams: TeamCreateManyWithoutPostedByInput
  players: PlayerCreateManyWithoutPostedByInput
  games: GameCreateManyWithoutPostedByInput
}

input UserCreateWithoutPlayersInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: Role
  leagues: LeagueCreateManyWithoutPostedByInput
  teams: TeamCreateManyWithoutPostedByInput
  games: GameCreateManyWithoutPostedByInput
}

input UserCreateWithoutTeamsInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: Role
  leagues: LeagueCreateManyWithoutPostedByInput
  players: PlayerCreateManyWithoutPostedByInput
  games: GameCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  password: String!
  email: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  password: String
  email: String
  role: Role
  leagues: LeagueUpdateManyWithoutPostedByInput
  teams: TeamUpdateManyWithoutPostedByInput
  players: PlayerUpdateManyWithoutPostedByInput
  games: GameUpdateManyWithoutPostedByInput
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  role: Role
  leagues: LeagueUpdateManyWithoutPostedByInput
  teams: TeamUpdateManyWithoutPostedByInput
  players: PlayerUpdateManyWithoutPostedByInput
  games: GameUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  email: String
  role: Role
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  update: UserUpdateWithoutGamesDataInput
  upsert: UserUpsertWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLeaguesInput {
  create: UserCreateWithoutLeaguesInput
  update: UserUpdateWithoutLeaguesDataInput
  upsert: UserUpsertWithoutLeaguesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlayersInput {
  create: UserCreateWithoutPlayersInput
  update: UserUpdateWithoutPlayersDataInput
  upsert: UserUpsertWithoutPlayersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTeamsInput {
  create: UserCreateWithoutTeamsInput
  update: UserUpdateWithoutTeamsDataInput
  upsert: UserUpsertWithoutTeamsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGamesDataInput {
  name: String
  password: String
  email: String
  role: Role
  leagues: LeagueUpdateManyWithoutPostedByInput
  teams: TeamUpdateManyWithoutPostedByInput
  players: PlayerUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutLeaguesDataInput {
  name: String
  password: String
  email: String
  role: Role
  teams: TeamUpdateManyWithoutPostedByInput
  players: PlayerUpdateManyWithoutPostedByInput
  games: GameUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutPlayersDataInput {
  name: String
  password: String
  email: String
  role: Role
  leagues: LeagueUpdateManyWithoutPostedByInput
  teams: TeamUpdateManyWithoutPostedByInput
  games: GameUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutTeamsDataInput {
  name: String
  password: String
  email: String
  role: Role
  leagues: LeagueUpdateManyWithoutPostedByInput
  players: PlayerUpdateManyWithoutPostedByInput
  games: GameUpdateManyWithoutPostedByInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserUpsertWithoutLeaguesInput {
  update: UserUpdateWithoutLeaguesDataInput!
  create: UserCreateWithoutLeaguesInput!
}

input UserUpsertWithoutPlayersInput {
  update: UserUpdateWithoutPlayersDataInput!
  create: UserCreateWithoutPlayersInput!
}

input UserUpsertWithoutTeamsInput {
  update: UserUpdateWithoutTeamsDataInput!
  create: UserCreateWithoutTeamsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  leagues_every: LeagueWhereInput
  leagues_some: LeagueWhereInput
  leagues_none: LeagueWhereInput
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Win {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  postedBy: User!
  team: Team!
  game: Game!
}

type WinConnection {
  pageInfo: PageInfo!
  edges: [WinEdge]!
  aggregate: AggregateWin!
}

input WinCreateInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutWinsInput!
  game: GameCreateOneWithoutWinsInput!
}

input WinCreateManyWithoutGameInput {
  create: [WinCreateWithoutGameInput!]
  connect: [WinWhereUniqueInput!]
}

input WinCreateManyWithoutTeamInput {
  create: [WinCreateWithoutTeamInput!]
  connect: [WinWhereUniqueInput!]
}

input WinCreateWithoutGameInput {
  id: ID
  postedBy: UserCreateOneInput!
  team: TeamCreateOneWithoutWinsInput!
}

input WinCreateWithoutTeamInput {
  id: ID
  postedBy: UserCreateOneInput!
  game: GameCreateOneWithoutWinsInput!
}

type WinEdge {
  node: Win!
  cursor: String!
}

enum WinOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WinPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input WinScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WinScalarWhereInput!]
  OR: [WinScalarWhereInput!]
  NOT: [WinScalarWhereInput!]
}

type WinSubscriptionPayload {
  mutation: MutationType!
  node: Win
  updatedFields: [String!]
  previousValues: WinPreviousValues
}

input WinSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WinWhereInput
  AND: [WinSubscriptionWhereInput!]
  OR: [WinSubscriptionWhereInput!]
  NOT: [WinSubscriptionWhereInput!]
}

input WinUpdateInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutWinsInput
  game: GameUpdateOneRequiredWithoutWinsInput
}

input WinUpdateManyWithoutGameInput {
  create: [WinCreateWithoutGameInput!]
  delete: [WinWhereUniqueInput!]
  connect: [WinWhereUniqueInput!]
  set: [WinWhereUniqueInput!]
  disconnect: [WinWhereUniqueInput!]
  update: [WinUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [WinUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [WinScalarWhereInput!]
}

input WinUpdateManyWithoutTeamInput {
  create: [WinCreateWithoutTeamInput!]
  delete: [WinWhereUniqueInput!]
  connect: [WinWhereUniqueInput!]
  set: [WinWhereUniqueInput!]
  disconnect: [WinWhereUniqueInput!]
  update: [WinUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [WinUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [WinScalarWhereInput!]
}

input WinUpdateWithoutGameDataInput {
  postedBy: UserUpdateOneRequiredInput
  team: TeamUpdateOneRequiredWithoutWinsInput
}

input WinUpdateWithoutTeamDataInput {
  postedBy: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutWinsInput
}

input WinUpdateWithWhereUniqueWithoutGameInput {
  where: WinWhereUniqueInput!
  data: WinUpdateWithoutGameDataInput!
}

input WinUpdateWithWhereUniqueWithoutTeamInput {
  where: WinWhereUniqueInput!
  data: WinUpdateWithoutTeamDataInput!
}

input WinUpsertWithWhereUniqueWithoutGameInput {
  where: WinWhereUniqueInput!
  update: WinUpdateWithoutGameDataInput!
  create: WinCreateWithoutGameInput!
}

input WinUpsertWithWhereUniqueWithoutTeamInput {
  where: WinWhereUniqueInput!
  update: WinUpdateWithoutTeamDataInput!
  create: WinCreateWithoutTeamInput!
}

input WinWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  team: TeamWhereInput
  game: GameWhereInput
  AND: [WinWhereInput!]
  OR: [WinWhereInput!]
  NOT: [WinWhereInput!]
}

input WinWhereUniqueInput {
  id: ID
}
`
      }
    